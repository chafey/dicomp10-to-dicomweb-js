version: 2.1

# 
## https://github.com/cypress-io/circleci-orb
# orbs:
#   codecov: codecov/codecov@1.0.5
#   cypress: cypress-io/cypress@1.26.0

#https://circleci.com/docs/2.0/configuration-reference/#docker--machine--macos--windows-executor
executors:
  emscripten-porter:
    docker:
      # @see https://hub.docker.com/repository/r/emscripten/emsdk
      - image: emscripten/emsdk:3.1.3
        environment:
          # Enable colors in term
          TERM: xterm
          # Avoid warnings by switching to noninteractive
          DEBIAN_FRONTEND: noninteractive
          # This Dockerfile's base image has a non-root user with sudo access. Use the "remoteUser"
          # property in devcontainer.json to use it. On Linux, the container user's GID/UIDs
          # will be updated to match your local UID/GID (when using the dockerFile property).
          # See https://aka.ms/vscode-remote/containers/non-root-user for details.
          USERNAME: vscode
          USER_UID: 1000
          USER_GID: 1000 # $USER_UID
  node:
    docker:
      - image: cimg/node:14.18.3
        environment:
          TERM: xterm # Enable colors in term
  # Custom executor to override Cypress config
  # deploy-to-prod-executor:
  #   docker:
  #     - image: 'cypress/browsers:node14.15.0-chrome86-ff82'
  #       environment:
  #         CYPRESS_BASE_URL: https://ohif-staging.netlify.com/
  # chrome-and-pacs:
  #   docker:
  #     # Primary container image where all steps run.
  #     - image: 'cypress/browsers:node14.15.0-chrome86-ff82'
  #     - image: 'ohif/viewer-testdata:0.1-test'
      
jobs:
  BUILD:
    executor: emscripten-porter
    working_directory: ~/repo
    steps:
      - run:
          name: Configure apt and install packages
          command: |
            apt-get update
            apt-get install -y gnupg

            # Install & Setup Yarn
            curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
            echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list

            apt-get update
            apt install yarn -y
            
            # Clean up
            apt-get autoremove -y
            apt-get clean -y
            rm -rf /var/lib/apt/lists/*
      - run: gcc --version
      - run: node -v
      - run: yarn -v
      - checkout
      - run: git submodule update --init
      - run:
          name: Install Dependencies
          command: yarn install --frozen-lockfile
      - run: yarn run build:ci
      - persist_to_workspace:
          root: ~/repo
          paths:
            - .
  
  TEST:
    executor: node
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: ~/repo
      - run: yarn why @cornerstonejs/dicom-codec
      - run: pwd
      - run: ls node_modules/@cornerstonejs/dicom-codec/src/codecs
      - run: yarn run test:ci

  NPM_PUBLISH:
    executor: emscripten-porter
    working_directory: ~/repo
    steps:
      #
      # Environment setup to install yarn
      # TODO: Leverage CircleCI caching for these dependencies across builds,
      # or configure docker layer caching (this should be deterministic). We could
      # also publish an image on top of our executor to speed up build times.
      # TODO: As this is a requirement for local testing, we should probably
      # push this into a shared script
      - run:
          name: Configure apt and install packages
          command: |
            apt-get update
            apt-get install -y gnupg

            # Install & Setup Yarn
            curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
            echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list

            apt-get update
            apt install yarn -y

            # Clean up
            apt-get autoremove -y
            apt-get clean -y
            rm -rf /var/lib/apt/lists/*
      #
      # Print versions of misc. dependent tooling
      - run: gcc --version
      - run: node -v
      - run: yarn -v
      #
      # Checkout source code and dependent submodules
      # Where submodules are the C/C++ libraries we intend to port
      # using emscripten
      - checkout
      - run: git submodule update --init
      #
      # Caches dependencies between CI runs. We use the `yarn.lock` file as our
      # "cache key". We then restore dependencies from lockfile and update our
      # cache if it's changed.
      - restore_cache:
          name: Restore Yarn and Cypress Package Cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
            - yarn-packages-
      - run:
          name: Install Dependencies
          command: yarn install --frozen-lockfile
      - save_cache:
          name: Save Yarn Package Cache
          paths:
            - ~/.cache/yarn
          key: yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: Avoid hosts unknown for github
          command:
            mkdir ~/.ssh/ && echo -e "Host github.com\n\tStrictHostKeyChecking
            no\n" > ~/.ssh/config
      - run:
          name: Publish using Semantic Release
          command: npx semantic-release

workflows:
  version: 2

  PR_CHECKS:
    jobs:
      - BUILD:
          filters:
            branches:
              ignore:
                - main
      - TEST:
          requires:
            - BUILD
  DEPLOY:
    jobs:
      - NPM_PUBLISH:
          filters:
            branches:
              only: main
